// Distributed genetic algorithm simulations across the processing elements
// (PEs). The kernel enables each PE to manage a local population, simulate
// generational evolution, and migrate genomes to/from neighboring PEs.
//
// main program cycle:
// 1. check N/S/E/W recv flags; for any completed,
//    - harvest genomes from completed recv buffer into population
//    - open new async request to recv from that neighbor into buffer
//    - when async recv request completes, callback task sets receive flag
// 2. elapse population generation using tournament selection; for each
//    tournament,
//    - sample two candidate parents
//    - create two offspring by copying and mutating parent genomes
//    - select the fittest offspring to replace a random population member
// 3. check N/S/E/W send flags; for any completed,
//    - update send buffer with genomes from current population
//    - open new async request to send from buffer to that neighbor
//    - when async send request completes, callback task sets send flag
// 4. trigger next iteration of main cycle

// layout parameters ==========================================================
///////////////////////////////////////////////////////////////////////////////
param nCycleAtLeast: u32;  // how many self-activation cycles to run for?
param msecAtLeast: u32;  // how many real-time milliseconds to run for?
param tscAtLeast: u32;  // how many timestamp counter ticks to run for?
param nRow: i16;  // how big is PE array?
param nCol: i16;
param nRowSubgrid: i16;  // if n, disable migration between PEs every n rows
param nColSubgrid: i16;  // if n, disable migration between PEs every n cols
param nonBlock: u8;  // if true, unblock memcpy command stream at startup
param popSize: u16;  // how many genomes in each local population?
param tournSize: f32;  // how many genomes compete for selection?
param memcpy_params: comptime_struct;  // parameters for memcpy layout
param globalSeed: u16;
param colorSwapParity: bool;  // is "black" or "white" tile in checkerboard?

// module imports =============================================================
///////////////////////////////////////////////////////////////////////////////
const math = @import_module("<math>");
// memcpy module for copying data and launching functions from the host
const layout_module = @import_module("<layout>");
const memcpy = @import_module("<memcpy/memcpy>", memcpy_params);
const random = @import_module("<random>");
const time = @import_module("<time>");

const compconf = @import_module("<compconf>");
comptime {  // access via get_value for logging...
  const _ = compconf.get_value("ASYNC_GA_GENOME_FLAVOR", comptime_string);
}  // ... raw string works around sdk v1.0.0 limitation
const compconf_raw = @import_module("<compconf_raw>");
const genome_ = @import_module(
  @strcat(
    "cerebraslib/genome/",
    compconf_raw.ASYNC_GA_GENOME_FLAVOR,
    ".csl",
  ),
);
// TODO why can't this be genomes have an even number of words?
// TODO see https://github.com/mmore500/wse-async-ga/issues/4
comptime { @comptime_assert(genome_.gSize % 2 == 1); }

const nTraitVals = genome_.nTraitVals;
const pExtinction = compconf.get_value_or(
    "CEREBRASLIB_POPULATION_EXTINCTION_PROBABILITY",
    @as(f32, 0.0),
);

const population = @import_module("cerebraslib/population.csl", .{
  .gSize = genome_.gSize, .popSize = popSize,
  .pExtinction = pExtinction,
  .tournamentSize = tournSize,
  .fitFun = genome_.calc_fitness_of,
  .immClobber = genome_.hasImmClobber,
  .immClobberFun = genome_.clobber_immigrant,
  .inheritFun = genome_.elapse_inheritance_of,
  .initFun = genome_.initialize_one,
  .traitFun = genome_.get_trait_value,
});
const wildtypeLogger = @import_module(
  "cerebraslib/traitlogger.csl", .{ .symbolName = "wildtypeLoggerRecord" }
);
const ctrl = @import_module("cerebraslib/ctrl.csl");
const optime = @import_module("cerebraslib/optime.csl");

// global output variables ====================================================
// for end-state telemetry, ptrs are necessary for memcpy infrastructure
///////////////////////////////////////////////////////////////////////////////
var x: i16 = 0; var y: i16 = 0;  // PE array coordinates
var cycleCounter = @zeros([1]u32);  // how many self-activation cycles elapse?
var ptr_cycleCounter : [*]u32 = &cycleCounter;

var recvCounter_N = @zeros([1]u32);  // number recv's opened + number filled
var ptr_recvCounter_N : [*]u32 = &recvCounter_N;
var recvCounter_S = @zeros([1]u32);
var ptr_recvCounter_S : [*]u32 = &recvCounter_S;
var recvCounter_E = @zeros([1]u32);
var ptr_recvCounter_E : [*]u32 = &recvCounter_E;
var recvCounter_W = @zeros([1]u32);
var ptr_recvCounter_W : [*]u32 = &recvCounter_W;

var sendCounter_N = @zeros([1]u32);  // number send's opened + number filled
var ptr_sendCounter_N : [*]u32 = &sendCounter_N;
var sendCounter_S = @zeros([1]u32);
var ptr_sendCounter_S : [*]u32 = &sendCounter_S;
var sendCounter_E = @zeros([1]u32);
var ptr_sendCounter_E : [*]u32 = &sendCounter_E;
var sendCounter_W = @zeros([1]u32);
var ptr_sendCounter_W : [*]u32 = &sendCounter_W;

var traitCounts = @zeros([nTraitVals]u32);
var ptr_traitCounts : [*]u32 = &traitCounts;
var traitCycles = @zeros([nTraitVals]u32);
var ptr_traitCycles: [*]u32 = &traitCycles;
var traitValues = @zeros([nTraitVals]u32);
var ptr_traitValues: [*]u32 = &traitValues;

var genome = @zeros([population.gSize]u32);  // samples 0th population element
var ptr_genome : [*]u32 = &genome;  // (which is convenient)

var genomeBookend = @zeros([population.gSize + 2]u32);  // w/ bookend validation
var ptr_genomeBookend : [*]u32 = &genomeBookend;  // for async memcpy

var fitness = @zeros([1]f32);  // samples 0th population element (convenient)
var ptr_fitness : [*]f32 = &fitness;

// report back layout params (sanity check)
var whoami = @zeros([1]u32); var ptr_whoami : [*]u32 = &whoami;
var whereami_x = @zeros([1]u32); var ptr_whereami_x : [*]u32 = &whereami_x;
var whereami_y = @zeros([1]u32); var ptr_whereami_y : [*]u32 = &whereami_y;

// timestamp buffers, ensure an even number for 32-bit word memcpy
var tscControlBuffer = @zeros([(time.tsc_size_words + 1) / 2]u32);
var ptr_tscControlBuffer : [*]u32 = &tscControlBuffer;
var tscEndBuffer = @zeros([(time.tsc_size_words + 1) / 2]u32);
var ptr_tscEndBuffer : [*]u32 = &tscEndBuffer;
var tscStartBuffer = @zeros([(time.tsc_size_words + 1) / 2]u32);
var ptr_tscStartBuffer : [*]u32 = &tscStartBuffer;

// queue IDs ==================================================================
///////////////////////////////////////////////////////////////////////////////
var busyThreads = @zeros([4]u8);  // 0, 1, 2, 3

// memcpy occupies ut 0 // RE: non-wse2 only
// ut 1 thru 3 used for output in nonBlock mode
// ut 0 thru 3 used for output in block mode

const q_out_N: output_queue = @get_output_queue(4);  // RE: non-wse2 only
const q_out_S: output_queue = @get_output_queue(5);  // RE: non-wse2 only
const q_out_E: output_queue = @get_output_queue(6);  // RE: non-wse2 only
const q_out_W: output_queue = @get_output_queue(7);  // RE: non-wse2 only

const ut_in_N: u8 = 4;  // RE: non-wse2 only
const ut_in_S: u8 = 5;  // RE: non-wse2 only
const ut_in_E: u8 = 6;  // RE: non-wse2 only
const ut_in_W: u8 = 7;  // RE: non-wse2 only

const q_in_N: input_queue = @get_input_queue(4);
const q_in_S: input_queue = @get_input_queue(5);
const q_in_E: input_queue = @get_input_queue(6);
const q_in_W: input_queue = @get_input_queue(7);

// task IDs ===================================================================
///////////////////////////////////////////////////////////////////////////////
const sendColor_N: color = @get_color(if (colorSwapParity) 0 else 1);
const recvColor_S: color = @get_color(if (colorSwapParity) 1 else 0);
const ignRecvTaskID_S: data_task_id = (
  if (@is_arch("wse2")) @get_data_task_id(recvColor_S)
  else @get_data_task_id(q_in_S)
);

const sendColor_E: color = @get_color(if (colorSwapParity) 2 else 3);
const recvColor_W: color = @get_color(if (colorSwapParity) 3 else 2);
const ignRecvTaskID_W: data_task_id = (
  if (@is_arch("wse2")) @get_data_task_id(recvColor_W)
  else @get_data_task_id(q_in_W)
);

const recvColor_N: color = @get_color(if (colorSwapParity) 4 else 5);
const sendColor_S: color = @get_color(if (colorSwapParity) 5 else 4);
const ignRecvTaskID_N: data_task_id = (
  if (@is_arch("wse2")) @get_data_task_id(recvColor_N)
  else @get_data_task_id(q_in_N)
);

const recvColor_E: color = @get_color(if (colorSwapParity) 6 else 7);
const sendColor_W: color = @get_color(if (colorSwapParity) 7 else 6);
const ignRecvTaskID_E: data_task_id = (
  if (@is_arch("wse2")) @get_data_task_id(recvColor_E)
  else @get_data_task_id(q_in_E)
);

// color 8 is available

// color 9 is used by RPC launcher

const sendFinalizeTaskID_N: local_task_id = @get_local_task_id(10);
const sendFinalizeTaskID_S: local_task_id = @get_local_task_id(11);
const sendFinalizeTaskID_E: local_task_id = @get_local_task_id(12);
const sendFinalizeTaskID_W: local_task_id = @get_local_task_id(13);

const recvFinalizeTaskID_N: local_task_id = @get_local_task_id(14);
const recvFinalizeTaskID_S: local_task_id = @get_local_task_id(15);
const recvFinalizeTaskID_E: local_task_id = @get_local_task_id(16);
const recvFinalizeTaskID_W: local_task_id = @get_local_task_id(17);

const closeoutTaskID: local_task_id = @get_local_task_id(18);
const cycleTaskID: local_task_id = @get_local_task_id(19);

// available: 20, 24, 25, 26, 32, 33, 34, 35
// reserved (memcpy): 21, 22, 23, 27, 28, 30
// reserved: 29, 31

///////////////////////////////////////////////////////////////////////////////
// ============================================================================
// send tasks
// ============================================================================
// asynchronously send genomes sampled from population to neighbors
///////////////////////////////////////////////////////////////////////////////
const sendNumGenomes: u16 = 1;  // how many genomes to batch sending together?
const sendBufSize: u16 = sendNumGenomes * population.gSize;

// send NORTH =================================================================
var sendFlag_N: u8; // need refill? initialized at startup
var sendThread_N: u8;  // which thread is sending?
var sendBuf_N = @zeros([sendBufSize]u32);  // hold genomes being sent
const sendBufDsd_N = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{sendBufSize} -> sendBuf_N[i], });

// callback for when send is complete, set flag to request refill & next send
task sendFinalizeTask_N() void {
  sendFlag_N = 1; sendCounter_N[0] += 1; busyThreads[sendThread_N] = 0;
}

// open async uthread to send from sendBuf
fn doDispatchSend_N(comptime thread: u8) void {
  population.emigrate_genomes(sendBufDsd_N, sendNumGenomes);
  const oq = if (@is_arch("wse2")) @get_output_queue(thread) else q_out_N;
  const sendDsd_N = @get_dsd(fabout_dsd, .{ .fabric_color = sendColor_N,
    .extent = sendBufSize, .output_queue = oq, });
  @fmovs(sendDsd_N, sendBufDsd_N,  // callback on complete
    if (@is_arch("wse2")) .{ .async = true, .activate = sendFinalizeTaskID_N, }
    else .{ .async = true, .activate = sendFinalizeTaskID_N,
      .ut_id = @get_ut_id(thread),
    },
  );
  sendCounter_N[0] += 1;  // counter only used for telemetry
}

fn tryDispatchSend_N(thread: u8) bool {
  if (busyThreads[thread] == 1) { return false; }
  busyThreads[thread] = 1;  // mark thread as busy
  sendThread_N = thread;
  switch (thread) {
    0 => doDispatchSend_N(0),
    1 => doDispatchSend_N(1),
    2 => doDispatchSend_N(2),
    3 => doDispatchSend_N(3),
    else => { @assert(false); },
  }
  return true;
}

fn dispatchSend_N() bool {
  for (@range(u8, 4)) |thread| {
    if (tryDispatchSend_N(thread)) { return true; }
  }
  return false;
}

// send SOUTH =================================================================
var sendFlag_S: u8; // need refill? initialized at startup
var sendThread_S: u8;  // which thread is sending?
var sendBuf_S = @zeros([sendBufSize]u32);  // hold genomes being sent
const sendBufDsd_S = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{sendBufSize} -> sendBuf_S[i], });

// callback for when send is complete, set flag to request refill & next send
task sendFinalizeTask_S() void {
  sendFlag_S = 1; sendCounter_S[0] += 1; busyThreads[sendThread_S] = 0;
}

// open async uthread to send from sendBuf
fn doDispatchSend_S(comptime thread: u8) void {
  population.emigrate_genomes(sendBufDsd_S, sendNumGenomes);
  const oq = if (@is_arch("wse2")) @get_output_queue(thread) else q_out_S;
  const sendDsd_S = @get_dsd(fabout_dsd, .{ .fabric_color = sendColor_S,
    .extent = sendBufSize, .output_queue = oq, });
  @fmovs(sendDsd_S, sendBufDsd_S,  // callback on complete
    if (@is_arch("wse2")) .{ .async = true, .activate = sendFinalizeTaskID_S, }
    else .{ .async = true, .activate = sendFinalizeTaskID_S,
      .ut_id = @get_ut_id(thread),
    },
  );
  sendCounter_S[0] += 1;  // counter only used for telemetry
}

fn tryDispatchSend_S(thread: u8) bool {
  if (busyThreads[thread] == 1) { return false; }
  busyThreads[thread] = 1;  // mark thread as busy
  sendThread_S = thread;
  switch (thread) {
    0 => doDispatchSend_S(0),
    1 => doDispatchSend_S(1),
    2 => doDispatchSend_S(2),
    3 => doDispatchSend_S(3),
    else => { @assert(false); },
  }
  return true;
}

fn dispatchSend_S() bool {
  for (@range(u8, 4)) |thread| {
    if (tryDispatchSend_S(thread)) { return true; }
  }
  return false;
}

// send EAST =================================================================
var sendFlag_E: u8; // need refill? initialized at startup
var sendThread_E: u8;  // which thread is sending?
var sendBuf_E = @zeros([sendBufSize]u32);  // hold genomes being sent
const sendBufDsd_E = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{sendBufSize} -> sendBuf_E[i], });

// callback for when send is complete, set flag to request refill & next send
task sendFinalizeTask_E() void {
  sendFlag_E = 1; sendCounter_E[0] += 1; busyThreads[sendThread_E] = 0;
}

// open async uthread to send from sendBuf
fn doDispatchSend_E(comptime thread: u8) void {
  population.emigrate_genomes(sendBufDsd_E, sendNumGenomes);
  const oq = if (@is_arch("wse2")) @get_output_queue(thread) else q_out_E;
  const sendDsd_E = @get_dsd(fabout_dsd, .{ .fabric_color = sendColor_E,
    .extent = sendBufSize, .output_queue = oq, });
  @fmovs(sendDsd_E, sendBufDsd_E,  // callback on complete
    if (@is_arch("wse2")) .{ .async = true, .activate = sendFinalizeTaskID_E, }
    else .{ .async = true, .activate = sendFinalizeTaskID_E,
      .ut_id = @get_ut_id(thread),
    },
  );
  sendCounter_E[0] += 1;  // counter only used for telemetry
}

fn tryDispatchSend_E(thread: u8) bool {
  if (busyThreads[thread] == 1) { return false; }
  busyThreads[thread] = 1;  // mark thread as busy
  sendThread_E = thread;
  switch (thread) {
    0 => doDispatchSend_E(0),
    1 => doDispatchSend_E(1),
    2 => doDispatchSend_E(2),
    3 => doDispatchSend_E(3),
    else => { @assert(false); },
  }
  return true;
}

fn dispatchSend_E() bool {
  for (@range(u8, 4)) |thread| {
    if (tryDispatchSend_E(thread)) { return true; }
  }
  return false;
}

// send WEST =================================================================
var sendFlag_W: u8; // need refill? initialized at startup
var sendThread_W: u8;  // which thread is sending?
var sendBuf_W = @zeros([sendBufSize]u32);  // hold genomes being sent
const sendBufDsd_W = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{sendBufSize} -> sendBuf_W[i], });

// callback for when send is complete, set flag to request refill & next send
task sendFinalizeTask_W() void {
  sendFlag_W = 1; sendCounter_W[0] += 1; busyThreads[sendThread_W] = 0;
}

// open async uthread to send from sendBuf
fn doDispatchSend_W(comptime thread: u8) void {
  population.emigrate_genomes(sendBufDsd_W, sendNumGenomes);
  const oq = if (@is_arch("wse2")) @get_output_queue(thread) else q_out_W;
  const sendDsd_W = @get_dsd(fabout_dsd, .{ .fabric_color = sendColor_W,
    .extent = sendBufSize, .output_queue = oq, });
  @fmovs(sendDsd_W, sendBufDsd_W,  // callback on complete
    if (@is_arch("wse2")) .{ .async = true, .activate = sendFinalizeTaskID_W, }
    else .{ .async = true, .activate = sendFinalizeTaskID_W,
      .ut_id = @get_ut_id(thread),
    },
  );
  sendCounter_W[0] += 1;  // counter only used for telemetry
}

fn tryDispatchSend_W(thread: u8) bool {
  if (busyThreads[thread] == 1) { return false; }
  busyThreads[thread] = 1;  // mark thread as busy
  sendThread_W = thread;
  switch (thread) {
    0 => doDispatchSend_W(0),
    1 => doDispatchSend_W(1),
    2 => doDispatchSend_W(2),
    3 => doDispatchSend_W(3),
    else => { @assert(false); },
  }
  return true;
}

fn dispatchSend_W() bool {
  for (@range(u8, 4)) |thread| {
    if (tryDispatchSend_W(thread)) { return true; }
  }
  return false;
}

///////////////////////////////////////////////////////////////////////////////
// ============================================================================
// recv tasks
// ============================================================================
// asynchronously accept genomes from neighbors,
// which are then harvested from buffer & immigrated into the population
///////////////////////////////////////////////////////////////////////////////
const recvNumGenomes: u16 = 4;  // how many genomes to batch together?
const recvBufSize: u16 = recvNumGenomes * population.gSize;

// recv NORTH =================================================================
var recvFlag_N: u8 = 0;  // need harvest? init 0 (naked dispatchRecv on startup)
var recvBuf_N = @zeros([recvBufSize]u32);  // hold genomes being received
const recvBufDsd_N = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{recvBufSize} -> recvBuf_N[i], });

// callback when recv is complete, set flag to
// 1) trigger immigration from recv buffer into pop and 2) request next recv
task recvFinalizeTask_N() void { recvFlag_N = 1; recvCounter_N[0] += 1;
  if (closeoutRemaining == 0) { @unblock(ignRecvTaskID_N); }
}

fn dispatchRecv_N() void {  // open async microthread to recv ing recvBuf
  const recvDsd_N = @get_dsd(fabin_dsd, .{ .fabric_color = recvColor_N,
    .extent = recvBufSize, .input_queue = q_in_N, });
  @fmovs(recvBufDsd_N, recvDsd_N,  // callback on complete
    if (@is_arch("wse2")) .{ .async = true, .activate = recvFinalizeTaskID_N }
    else .{ .async = true, .activate = recvFinalizeTaskID_N,
      .ut_id = @get_ut_id(ut_in_N),
    },
  );
  recvCounter_N[0] += 1;  // counter only used for telemetry
}

// recv SOUTH =================================================================
var recvFlag_S: u8 = 0;  // need harvest? init 0 (naked dispatchRecv on startup)
var recvBuf_S = @zeros([recvBufSize]u32);  // hold genomes being received
const recvBufDsd_S = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{recvBufSize} -> recvBuf_S[i],
});

// callback when recv is complete, set flag to
// 1) trigger immigration from recv buffer into pop and 2) request next recv
task recvFinalizeTask_S() void { recvFlag_S = 1; recvCounter_S[0] += 1;
  if (closeoutRemaining == 0) { @unblock(ignRecvTaskID_S); }
}

// open an async microthread to recv from neighbor into recvBuf
fn dispatchRecv_S() void {  // open async microthread to recv ing recvBuf
  const recvDsd_S = @get_dsd(fabin_dsd, .{ .fabric_color = recvColor_S,
    .extent = recvBufSize, .input_queue = q_in_S, });
  @fmovs(recvBufDsd_S, recvDsd_S,  // callback on complete
    if (@is_arch("wse2")) .{ .async = true, .activate = recvFinalizeTaskID_S }
    else .{ .async = true, .activate = recvFinalizeTaskID_S,
      .ut_id = @get_ut_id(ut_in_S),
    },
  );
  recvCounter_S[0] += 1;  // counter only used for telemetry
}

// recv EAST ==================================================================
var recvFlag_E: u8 = 0;  // need harvest? init 0 (naked dispatchRecv on startup)
var recvBuf_E = @zeros([recvBufSize]u32);  // hold genomes being received
const recvBufDsd_E = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{recvBufSize} -> recvBuf_E[i], });

// callback when recv is complete, set flag to
// 1) trigger immigration from recv buffer into pop and 2) request next recv
task recvFinalizeTask_E() void { recvFlag_E = 1; recvCounter_E[0] += 1;
  if (closeoutRemaining == 0) { @unblock(ignRecvTaskID_E); }
}

fn dispatchRecv_E() void {  // open an async microthread to recv into recvBuf
  const recvDsd_E = @get_dsd(fabin_dsd, .{  .fabric_color = recvColor_E,
    .extent = recvBufSize, .input_queue = q_in_E, });
  @fmovs(recvBufDsd_E, recvDsd_E,  // callback on complete
    if (@is_arch("wse2")) .{ .async = true, .activate = recvFinalizeTaskID_E }
    else .{ .async = true, .activate = recvFinalizeTaskID_E,
      .ut_id = @get_ut_id(ut_in_E),
    },
  );
  recvCounter_E[0] += 1;  // counter only used for telemetry
}

// recv WEST ==================================================================
var recvFlag_W: u8 = 0;  // need harvest? init 0 (naked dispatchRecv on startup)
var recvBuf_W = @zeros([recvBufSize]u32);  // hold genomes being received
const recvBufDsd_W = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{recvBufSize} -> recvBuf_W[i], });

// callback when recv is complete, set flag to
// 1) trigger immigration from recv buffer into pop and 2) request next recv
task recvFinalizeTask_W() void { recvFlag_W = 1; recvCounter_W[0] += 1;
  if (closeoutRemaining == 0) { @unblock(ignRecvTaskID_W); }
}

fn dispatchRecv_W() void { // open an async microthread to recv into recvBuf
  const recvDsd_W = @get_dsd(fabin_dsd, .{ .fabric_color = recvColor_W,
    .extent = recvBufSize, .input_queue = q_in_W, });
  @fmovs(recvBufDsd_W, recvDsd_W,  // callback on complete
    if (@is_arch("wse2")) .{ .async = true, .activate = recvFinalizeTaskID_W }
    else .{ .async = true, .activate = recvFinalizeTaskID_W,
      .ut_id = @get_ut_id(ut_in_W),
    },
  );
  recvCounter_W[0] += 1;  // counter only used for telemetry
}

///////////////////////////////////////////////////////////////////////////////
// ============================================================================
// closeout task
// ============================================================================
// when PEs' sends are complete, ensure all recvs are open
// (or switched to ignore) and then terminate
///////////////////////////////////////////////////////////////////////////////
var closeoutRemaining: u8;  // set at startup
fn closeoutSend() bool {
  if (sendFlag_N == 1) { sendFlag_N = 0; closeoutRemaining -= 1; }
  if (sendFlag_S == 1) { sendFlag_S = 0; closeoutRemaining -= 1; }
  if (sendFlag_E == 1) { sendFlag_E = 0; closeoutRemaining -= 1; }
  if (sendFlag_W == 1) { sendFlag_W = 0; closeoutRemaining -= 1; }
  return !@as(bool, closeoutRemaining);
}
task ignRecvTask_N(_: u16) void { } task ignRecvTask_S(_: u16) void { }
task ignRecvTask_E(_: u16) void { } task ignRecvTask_W(_: u16) void { }
fn closeoutRecv() void {
  if (recvFlag_N == 1) { recvFlag_N = 0; @unblock(ignRecvTaskID_N); }
  if (recvFlag_S == 1) { recvFlag_S = 0; @unblock(ignRecvTaskID_S); }
  if (recvFlag_E == 1) { recvFlag_E = 0; @unblock(ignRecvTaskID_E); }
  if (recvFlag_W == 1) { recvFlag_W = 0; @unblock(ignRecvTaskID_W); }
}

task closeoutTask() void {
  if (closeoutSend()) {
    if (nonBlock == 0) memcpy.unblock_cmd_stream();  // terminate
  } else { @activate(closeoutTaskID); }  // trigger next cycle
  closeoutRecv();  // run LAST in either case
}
///////////////////////////////////////////////////////////////////////////////

// halt condition ============================================================
fn shouldHalt(cycle: u32) bool {
  const nCycleOk = cycle >= nCycleAtLeast;
  return nCycleOk;
  // const msecOk = optime.has_elapsed_ms_(
  //   msecAtLeast,
  //   @ptrcast(*[3]u16, &tscStartBuffer),
  // );
  // const tscOk = optime.has_elapsed_tsc_(
  //   tscAtLeast,
  //   @ptrcast(*[3]u16, &tscStartBuffer),
  // );
  // return nCycleOk and msecOk and tscOk;
}

// cycle task =================================================================
// main program loop: self-activate with incrementing values until nCycleAtLeast
///////////////////////////////////////////////////////////////////////////////
task cycleTask() void {
  // handle recv flags, pull recv buffer into pop and start next async recv
  // note: never-filled recv requests on PE array edges ok
  // --------------------------------------------------------------------------
  if (recvFlag_N == 1) {  // has open recv request been filled?
    var recvBufPtr_N = @ptrcast([*]u32, &recvBuf_N[0]);
    population.immigrate_genomes(recvBufPtr_N, recvNumGenomes);
    recvFlag_N = 0; dispatchRecv_N();
  }
  if (recvFlag_S == 1) {
    var recvBufPtr_S = @ptrcast([*]u32, &recvBuf_S[0]);
    population.immigrate_genomes(recvBufPtr_S, recvNumGenomes);
    recvFlag_S = 0; dispatchRecv_S();
  }
  if (recvFlag_E == 1) {
    var recvBufPtr_E = @ptrcast([*]u32, &recvBuf_E[0]);
    population.immigrate_genomes(recvBufPtr_E, recvNumGenomes);
    recvFlag_E = 0; dispatchRecv_E();
  }
  if (recvFlag_W == 1) {
    var recvBufPtr_W = @ptrcast([*]u32, &recvBuf_W[0]);
    population.immigrate_genomes(recvBufPtr_W, recvNumGenomes);
    recvFlag_W = 0; dispatchRecv_W();
  }

  // apply replication/selection to population
  // --------------------------------------------------------------------------
  population.do_generation();

  // handle send flags, load send buffer from pop and start next async send
  // --------------------------------------------------------------------------
  const shuf = @random16() & 3;
  for (@range(u16, 4)) |i| {  // send to all neighbors
    const numBusy = (
      busyThreads[0] + busyThreads[1] + busyThreads[2] + busyThreads[3]
    );
    if (numBusy == 4) break;
    const j = (i + shuf) & 3;  // round-robin order
    if (j == 0 and sendFlag_N == 1) {
      if (dispatchSend_N()) { sendFlag_N = 0; }
    } else if (j == 1 and sendFlag_S == 1) {
      if (dispatchSend_S()) { sendFlag_S = 0; }
    } else if (j == 2 and sendFlag_E == 1) {
      if (dispatchSend_E()) { sendFlag_E = 0; }
    } else if (j == 3 and sendFlag_W == 1) {
      if (dispatchSend_W()) { sendFlag_W = 0; }
    }
  }

  // update telemetry
  // --------------------------------------------------------------------------
  for (@range(u16, popSize)) |i| {  // will record last cycle traits were seen
    traitCycles[population._get_ith_trait_value(i)] = cycleCounter[0];
  }

  wildtypeLogger.update(population._get_ith_trait_value(0) == 0);

  // trigger next cycle
  // --------------------------------------------------------------------------
  if (!shouldHalt(cycleCounter[0])) { cycleCounter[0] += 1;  // for telemetry
    @activate(cycleTaskID);  // send wavelet to self, trigger next cycle
  } else {
    // closeout telemetry
    // ------------------------------------------------------------------------
    time.get_timestamp(@ptrcast(*[3]u16, ptr_tscEndBuffer));
    fitness[0] = population._calc_ith_fitness(0);
    // record final trait distributions
    for (@range(u16, popSize)) |i| {
      traitCounts[population._get_ith_trait_value(i)] += 1;
    }
    // record trait values
    for (@range(u32, nTraitVals)) |i| { traitValues[i] = i; }

    // sample 0th element of population for telemetry
    const genome_ptr = population._get_ith_genome(0);
    for(@range(u16, population.gSize)) |i| {
      genome[i] = genome_ptr[i];
    }

    // trigger closeout cycle
    // ------------------------------------------------------------------------
    @activate(closeoutTaskID);  // trigger closeout cycle
  }
}

// launcher ===================================================================
///////////////////////////////////////////////////////////////////////////////
// appears to prevent hardware simulation crash, will consume different
// numbers of cycles on different PEs at launch to desynchronize them at startup
fn desync() void { for (@range(u16, @random16() % 256)) |i| { @random16(); } }

fn genomerefresh() void {
  const genome_ptr = population._get_ith_genome(0);
  genomeBookend[population.gSize + 1] += 1;
  for(@range(u16, population.gSize)) |i| {
    genomeBookend[i + 1] = genome_ptr[i];
  }
  genomeBookend[0] += 1;
}

fn dorefresh() void {  // launched by RPC (remote procedure call)
  genomerefresh();
  memcpy.unblock_cmd_stream();
}

fn dolaunch() void {  // launched by RPC (remote procedure call)
  time.enable_tsc();
  // record layout params for telemetry
  x = @as(i16, layout_module.get_x_coord());
  y = @as(i16, layout_module.get_y_coord());
  whereami_x[0] = @as(u32, x);
  whereami_y[0] = @as(u32, y);
  whoami[0] = whereami_y[0] * @as(u32, nCol) + whereami_x[0];

  busyThreads[0] = nonBlock;  // leave microthread/queue 0 open for memcpy

  // initialize send flags to request first fill, except for edges
  sendFlag_N = @as(u8, y != 0);  // except top PE row
  sendFlag_S = @as(u8, y != nRow - 1);  // except bottom row
  sendFlag_E = @as(u8, x != nCol - 1);  // except right col
  sendFlag_W = @as(u8, x != 0);  // except left col

  // apply barrierEveryNth to disable migration between PEs
  if (nRowSubgrid != 0) {
    sendFlag_N *= @as(u8, y % nRowSubgrid != 0);
    sendFlag_S *= @as(u8, y % nRowSubgrid != nRowSubgrid - 1);
  }
  if (nColSubgrid != 0) {
    sendFlag_E *= @as(u8, x % nColSubgrid != nColSubgrid - 1);
    sendFlag_W *= @as(u8, x % nColSubgrid != 0);
  }

  //  how many active neighbors?
  closeoutRemaining = sendFlag_N + sendFlag_S + sendFlag_E + sendFlag_W;

  // + 1 ensures nonzero local seed
  const localSeed = (
    @as(u32, globalSeed) * @as(u32, nRow) * @as(u32, nCol) + whoami[0] + 1
  );
  random.set_global_prng_seed(localSeed);  // zero seed seems to break RNG...
  desync();
  population.init_module();
  // initialize genome telemetry
  genomerefresh();
  // open initial recv requests, never-filled recv requests on edges ok
  dispatchRecv_N(); dispatchRecv_S(); dispatchRecv_E(); dispatchRecv_W();
  @activate(cycleTaskID);  // trigger first cycle
  @ptrcast(*[3]u16, ptr_tscEndBuffer).*[0] = 507;
  @ptrcast(*[3]u16, ptr_tscEndBuffer).*[1] = 3;
  @ptrcast(*[3]u16, ptr_tscEndBuffer).*[2] = 7;
  time.get_timestamp(@ptrcast(*[3]u16, ptr_tscStartBuffer));
  if (nonBlock == 1) memcpy.unblock_cmd_stream();
}

// bind tasks =================================================================
///////////////////////////////////////////////////////////////////////////////
comptime {
  @bind_local_task(sendFinalizeTask_N, sendFinalizeTaskID_N);
  @bind_local_task(sendFinalizeTask_S, sendFinalizeTaskID_S);
  @bind_local_task(sendFinalizeTask_E, sendFinalizeTaskID_E);
  @bind_local_task(sendFinalizeTask_W, sendFinalizeTaskID_W);

  @bind_local_task(recvFinalizeTask_N, recvFinalizeTaskID_N);
  @bind_local_task(recvFinalizeTask_S, recvFinalizeTaskID_S);
  @bind_local_task(recvFinalizeTask_E, recvFinalizeTaskID_E);
  @bind_local_task(recvFinalizeTask_W, recvFinalizeTaskID_W);

  @bind_data_task(ignRecvTask_N, ignRecvTaskID_N); @block(ignRecvTaskID_N);
  @bind_data_task(ignRecvTask_S, ignRecvTaskID_S); @block(ignRecvTaskID_S);
  @bind_data_task(ignRecvTask_E, ignRecvTaskID_E); @block(ignRecvTaskID_E);
  @bind_data_task(ignRecvTask_W, ignRecvTaskID_W); @block(ignRecvTaskID_W);

  @bind_local_task(cycleTask, cycleTaskID);
  @bind_local_task(closeoutTask, closeoutTaskID);

  if (!@is_arch("wse2")) {
    @initialize_queue(q_in_N, .{ .color = recvColor_N });
    @initialize_queue(q_in_S, .{ .color = recvColor_S });
    @initialize_queue(q_in_E, .{ .color = recvColor_E });
    @initialize_queue(q_in_W, .{ .color = recvColor_W });

    @initialize_queue(q_out_N, .{ .color = sendColor_N });
    @initialize_queue(q_out_S, .{ .color = sendColor_S });
    @initialize_queue(q_out_E, .{ .color = sendColor_E });
    @initialize_queue(q_out_W, .{ .color = sendColor_W });
  }
}

// wavlet routing =============================================================
///////////////////////////////////////////////////////////////////////////////
comptime {
  // NORTH / SOUTH (vertical)
  // note use of color swaps: neighbor's outgoing color -> PE's incoming color
  @set_local_color_config(sendColor_N, .{
    .routes = .{ .rx = .{ RAMP }, .tx = .{ NORTH } } }, );
  @set_local_color_config(sendColor_S, .{
    .routes = .{ .rx = .{ RAMP }, .tx = .{ SOUTH } } }, );
  @set_local_color_config(recvColor_N, .{
    .routes = .{ .rx = .{ NORTH }, .tx = .{ RAMP } } }, );
  @set_local_color_config( recvColor_S, .{
    .routes = .{ .rx = .{ SOUTH }, .tx = .{ RAMP } } }, );

  // EAST / WEST (horizontal)
  // note use of color swaps: neighbor's outgoing color -> PE's incoming color
  @set_local_color_config(sendColor_E, .{
    .routes = .{ .rx = .{ RAMP }, .tx = .{ EAST } } }, );
  @set_local_color_config(sendColor_W, .{
    .routes = .{ .rx = .{ RAMP }, .tx = .{ WEST } } }, );
  @set_local_color_config(recvColor_E, .{
    .routes = .{ .rx = .{ EAST }, .tx = .{ RAMP } } }, );
  @set_local_color_config(recvColor_W, .{
    .routes = .{ .rx = .{ WEST }, .tx = .{ RAMP } } }, );
}

// symbol exports =============================================================
///////////////////////////////////////////////////////////////////////////////
comptime {  // symbols let memcpy gather end-state data from device to host
  @export_symbol(ptr_cycleCounter, "cycleCounter");
  @export_symbol(ptr_recvCounter_N, "recvCounter_N");
  @export_symbol(ptr_recvCounter_S, "recvCounter_S");
  @export_symbol(ptr_recvCounter_E, "recvCounter_E");
  @export_symbol(ptr_recvCounter_W, "recvCounter_W");
  @export_symbol(ptr_sendCounter_N, "sendCounter_N");
  @export_symbol(ptr_sendCounter_S, "sendCounter_S");
  @export_symbol(ptr_sendCounter_E, "sendCounter_E");
  @export_symbol(ptr_sendCounter_W, "sendCounter_W");
  @export_symbol(ptr_traitCounts, "traitCounts");
  @export_symbol(ptr_traitCycles, "traitCycles");
  @export_symbol(ptr_traitValues, "traitValues");
  @export_symbol(ptr_fitness, "fitness");
  @export_symbol(ptr_genome, "genome");
  @export_symbol(ptr_genomeBookend, "genomeBookend");
  @export_symbol(ptr_whoami, "whoami");
  @export_symbol(ptr_whereami_x, "whereami_x");
  @export_symbol(ptr_whereami_y, "whereami_y");
  @export_symbol(ptr_tscControlBuffer, "tscControlBuffer");
  @export_symbol(ptr_tscEndBuffer, "tscEndBuffer");
  @export_symbol(ptr_tscStartBuffer, "tscStartBuffer");
  @export_symbol(dolaunch);
  @export_symbol(dorefresh);
}
